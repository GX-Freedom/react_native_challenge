{"version":3,"sources":["assets/time.jpg","Components/Section.js","Components/Loading.js","Components/Error.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Routes/Movie/MoviePresenter.js","Routes/Movie/index.js","Routes/Movie/MovieContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Header/Header.js","Components/Header/index.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["module","exports","Container","styled","div","Title","span","Grid","Section","title","children","propsTypes","PropTypes","string","isRequired","oneOfType","arrayOf","node","Loading","className","Contailner","Text","Error","text","protoType","Image","props","bgUrl","Rating","Year","ImageContaniner","Poster","id","imageUrl","rating","year","isMovie","isAdult","to","require","role","aria-label","length","substring","prototype","number","bool","HomePresenter","getPopular","upComing","topRated","tvtopRated","getLatest","today","error","loading","test","Helmet","map","movie","key","poster_path","vote_average","release_date","adult","tv","name","first_air_date","dotenv","config","api","axios","create","baseURL","params","api_key","language","tvApi","get","append_to_response","term","query","movieApi","HomeContainer","state","tvgetPopular","data","results","this","setState","React","Component","TVPresenter","weeklyAir","TVContainer","MoviePresernter","nowPlaying","MovieContainer","MoviePresenter","Form","form","Input","input","SearchPresenter","MovieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","backdrop_path","SearchContainer","event","preventDefault","searchByTerm","target","a","OpneDays","Genres","RunTime","Description","p","Average","Links","Link","Asite","Backdrop","InfoBox","Episode","Seasons","handleClick","alert","i","DetailPresenter","reasults","result","rel","href","networks","logo_path","style","display","window","location","indexOf","last_episode_to_air","still_path","document","split","fontSize","original_title","original_name","margin","videos","onClick","homepage","last_air_date","episode_run_time","x","runtime","seasons","air_date","overview","genres","index","DetailContainer","pathname","includes","match","push","history","parseId","parseInt","isNaN","Header","header","List","ul","Item","li","current","Slink","withRouter","path","exact","component","Home","TV","Movie","Search","Detail","from","GlobalStyled","createGlobalStyle","reset","App","Router","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.69283929.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/time.82835079.jpg\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst Container = styled.div`\r\n    padding-top:10px;\r\n    &:not(:last-child) {\r\n        margin-bottom: 50px;\r\n    }\r\n`;\r\n\r\nconst Title = styled.span`\r\n    font-size: 2rem;\r\n    font-weight: 600;\r\n    border-bottom:3px solid #FC427B;\r\n    /* line-height:1.7; */\r\n    &:hover{\r\n        color: #FC427B;\r\n        border-bottom:3px solid white;\r\n        transition: color 0.5s linear;\r\n    }\r\n`;\r\n\r\nconst Grid = styled.div`\r\n    margin-top: 25px;\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, 150px);\r\n    text-align:center;\r\n    grid-gap:20px;\r\n`;\r\n\r\nconst Section = ({ title, children }) => (\r\n    <Container>\r\n        <Title>{title}</Title>\r\n        <Grid>{children}</Grid>\r\n    </Container>\r\n);\r\n\r\nSection.propsTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    ])\r\n}\r\nexport default Section;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst Loading = styled.div`\r\n    font-size:3rem;\r\n    text-align:center;\r\n    /* justify-content:center; */\r\n    /* align-items:center; */\r\n    &>i{\r\n        animation: loadings 0.5s linear infinite;\r\n    }\r\n    &>div{\r\n        font-size:2rem;\r\n    }\r\n    @keyframes loadings{\r\n        0%{\r\n            transform:rotateZ(0);\r\n        }\r\n        100%{\r\n            transform:rotateZ(360deg);\r\n        }\r\n    }\r\n`;\r\nexport default () => {\r\n    return (\r\n        <>\r\n            <Loading>\r\n                <i className=\"fas fa-spinner\"></i>\r\n                <div>\r\n                    Loading\r\n            </div>\r\n            </Loading>\r\n\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Contailner = styled.div`\r\n    width:100%;\r\n    height:50vh;\r\n    display:flex;\r\n    align-items:flex-end;\r\n    justify-content:center;\r\n\r\n`;\r\n\r\nconst Text = styled.span`\r\n    color:#e84118;\r\n    font-weight:600;\r\n    font-size:3rem;\r\n    animation: colors 4s linear infinite;\r\n\r\n    @keyframes colors{\r\n        0%{\r\n            color:#A3CB38;\r\n        }\r\n        30%{\r\n            color:#EA2027;\r\n        }\r\n        60%{\r\n            color:#0652DD;\r\n        }\r\n        100%{\r\n            color:#A3CB38;\r\n        }\r\n    }\r\n`;\r\nconst Error = ({ text }) => (\r\n    <Contailner>\r\n        <Text>{text}</Text>\r\n    </Contailner>\r\n)\r\n\r\nError.protoType = {\r\n    text: PropTypes.string.isRequired\r\n};\r\nexport default Error;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst Container = styled.div`\r\n    font-size:0.8rem;\r\n    width:100%;\r\n    color:white;\r\n    display:flex;\r\n    flex-direction:column;\r\n    justify-content:space-between;\r\n    align-items:center;\r\n`;\r\n\r\nconst Image = styled.div`\r\n    background-image:url(${props => `${props.bgUrl}`});\r\n    width:100%;\r\n    height:200px;\r\n    border-radius:5px;\r\n    background-size:cover;\r\n    background-position:center center;\r\n    opacity:0.4;\r\n    transition: opacity 0.4s linear;\r\n`;\r\n\r\nconst Rating = styled.span`\r\n    position:absolute;\r\n    top:3px;\r\n    left:3px;\r\n    opacity:0;\r\n    color:#32ff7e;\r\n    font-size:1rem;\r\n    &>span{\r\n        color:yellow;\r\n    }\r\n    transition:opacity 0.4s linear;\r\n`;\r\n\r\nconst Title = styled.span`\r\n    display:block;\r\n    /* color:white; */\r\n    margin-top:30px;\r\n    margin-bottom:10px;\r\n    color:#6D214F;\r\n    font-size:1.5rem;\r\n    &:hover{\r\n        color:#ff4757;\r\n    }\r\n    transition:color 0.5s ease-in-out;\r\n`;\r\n\r\nconst Year = styled.span`\r\n    font-size:1rem;\r\n    color:white;\r\n    opacity:0.5;\r\n`;\r\n\r\nconst ImageContaniner = styled.div`\r\n    width:100%;\r\n    position:relative;\r\n    &:hover {\r\n        ${Image}{\r\n            opacity:1;\r\n        }\r\n        ${Rating}{\r\n            opacity:1;\r\n        }\r\n        ${Title}\r\n        {\r\n            color:#ff4757;\r\n        }\r\n        ${Year}{\r\n            opacity:1;\r\n        }\r\n    }\r\n`;\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false, isAdult = false }) => (\r\n    <Link to={isMovie ? `movie/${id}` : `tv/${id}`}>\r\n        <Container>\r\n            <ImageContaniner >\r\n                <Image bgUrl={imageUrl ? `https://image.tmdb.org/t/p/w300${imageUrl}` : require(\"../assets/time.jpg\")} />\r\n                {/* // require(\"../assets/time.jpg\") */}\r\n                {/* `https://image.tmdb.org/t/p/original${result.last_episode_to_air.still_path}` */}\r\n\r\n                <Rating>\r\n                    <span role=\"img\" aria-label=\"rating\">★</span>\r\n                    {rating}/10\r\n                </Rating>\r\n                <Title>\r\n                    {title && title.length > 15 ? `${title.substring(0, 15)}...` : title}\r\n                </Title>\r\n                <Year>\r\n                    {/* {year && year.split(\"-\")[0]} */}\r\n                    {year}\r\n                </Year>\r\n            </ImageContaniner>\r\n        </Container>\r\n    </Link>\r\n)\r\n\r\nPoster.prototype = {\r\n    id: PropTypes.number.isRequired,\r\n    imageUrl: PropTypes.string,\r\n    title: PropTypes.string.isRequired,\r\n    number: PropTypes.number,\r\n    year: PropTypes.string,\r\n    isMovie: PropTypes.bool,\r\n    isAdult: PropTypes.bool,\r\n};\r\n\r\nexport default Poster;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport Section from \"Components/Section\";\r\n// import { Link } from 'react-router-dom';\r\n// import { HashRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\r\nimport Loading from \"Components/Loading\";\r\nimport Error from \"Components/Error\";\r\nimport Poster from \"Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 0px 10px;\r\n`;\r\n\r\n// const Item = styled.div`\r\n//     width:100%;\r\n//     display:flex;\r\n//     flex-direction:column;\r\n//     align-items:center;\r\n//     justify-content:space-between;\r\n//     /* flex-direction:column; */\r\n//     margin:0.7rem 0;\r\n// `;\r\n\r\n// const Links = styled(Link)`\r\n//     margin:0 0.8rem 0 0;\r\n//     color:#6D214F;\r\n//     display:flex;\r\n//     justify-content:flex-start;\r\n//     font-size:1.5rem;\r\n\r\n//     &:hover{\r\n//         color:#ff4757;\r\n//         transition:color 0.5s ease-in-out;\r\n//     }\r\n// `;\r\n\r\n// const OpenDays = styled.span`\r\n//     display:flex;\r\n//     font-size:1rem;\r\n//     margin-top:1rem;\r\n// `;\r\n\r\nconst HomePresenter = ({ getPopular, upComing, topRated, tvtopRated, getLatest, today, error, loading, test }) =>\r\n    (\r\n        <>\r\n            <Helmet>\r\n                <title>Flix</title>\r\n            </Helmet>\r\n            {\r\n                loading ? (\r\n                    <Loading />\r\n                ) : (\r\n                        <Container>\r\n\r\n                            {/* {test.data.results[0].title} */}\r\n                            {/* {console.log(upComing)} */}\r\n                            {upComing && upComing.length > 0 && (\r\n                                <Section title={`개봉 예정 영화`}>\r\n                                    {upComing.map(movie =>\r\n                                        // <Item key={movie.id}>\r\n                                        //     <strong style={{ fontSize: \"1.3rem\" }}>\r\n                                        //         <Links key={movie.id} to={`movie/${movie.id}`}>\r\n                                        //             {movie.title.length > 10 ? movie.title.substring(0, 10) + \"...\" : movie.title}\r\n                                        //         </Links>\r\n                                        //     </strong>\r\n                                        //     <OpenDays>\r\n                                        //         {movie.release_date}\r\n                                        //     </OpenDays>\r\n                                        // </Item>\r\n                                        <Poster key={movie.id} id={movie.id} imageUrl={movie.poster_path} title={movie.title} rating={movie.vote_average} year={movie.release_date} isMovie={true} isMovie={false} isAdult={movie.adult === true ? true : false} />\r\n                                    )}\r\n                                </Section>\r\n                            )}\r\n                            {getPopular && getPopular.length > 0 && (\r\n                                <Section title=\"인기 영화\">\r\n                                    {getPopular.map(movie =>\r\n                                        // <Item style={{ fontSize: \"1.3rem\" }} key={movie.id}>\r\n                                        //     <Links key={movie.id} to={`movie/${movie.id}`}>\r\n                                        //         {movie.title.length > 10 ? movie.title.substring(0, 10) + \"...\" : movie.title}\r\n                                        //     </Links>\r\n                                        //     <OpenDays>\r\n                                        //         {movie.release_date}\r\n                                        //     </OpenDays>\r\n                                        // </Item>\r\n                                        <Poster key={movie.id} id={movie.id} imageUrl={movie.poster_path} title={movie.title} rating={movie.vote_average} year={movie.release_date} isMovie={true} isMovie={false} isAdult={movie.adult === true ? true : false} />\r\n                                    )}\r\n                                </Section>\r\n                            )}\r\n                            {topRated && topRated.length > 0 && (\r\n                                <Section title=\"평점 높은 영화\">\r\n                                    {topRated.map(movie => (\r\n                                        // <Item key={movie.id}>\r\n                                        //     <Links key={movie.id} to={`movie/${movie.id}`}>\r\n                                        //         {movie.title.length > 10 ? movie.title.substring(0, 10) + \"...\" : movie.title}\r\n                                        //     </Links>\r\n                                        //     < OpenDays >\r\n                                        //         {movie.release_date}\r\n                                        //     </OpenDays>\r\n                                        // </Item>\r\n                                        <Poster key={movie.id} id={movie.id} imageUrl={movie.poster_path} title={movie.title} rating={movie.vote_average} year={movie.release_date} isMovie={true} isMovie={false} isAdult={movie.adult === true ? true : false} />\r\n                                    ))}\r\n                                </Section>\r\n                            )}\r\n                            {\r\n                                tvtopRated && tvtopRated.length > 0 && (\r\n                                    <Section title=\"평점 높은 TV\">\r\n                                        {tvtopRated.map(tv =>\r\n                                            // <Item key={tv.id}>\r\n                                            //     <Links key={tv.id} to={`tv/${tv.id}`}>\r\n                                            //         {tv.name.length > 10 ? tv.name.substring(0, 10) + \"...\" : tv.name}\r\n                                            //     </Links>\r\n                                            //     < OpenDays >\r\n                                            //         {tv.first_air_date}\r\n                                            //     </OpenDays>\r\n                                            // </Item>\r\n                                            <Poster key={tv.id} id={tv.id} imageUrl={tv.poster_path} title={tv.name} rating={tv.vote_average} year={tv.first_air_date} isMovie={false} isMovie={false} isAdult={tv.adult === true ? true : false} />\r\n                                        )}\r\n                                    </Section>\r\n                                )\r\n                            }\r\n                            {\r\n                                getLatest && getLatest.length > 0 && (\r\n                                    <Section title=\"sdf\">\r\n                                        {getLatest.map(tv => (\r\n                                            // <Item key={tv.id}>\r\n                                            //     {tv.name.length > 10 ? tv.name.substring(0, 10) + \"...\" : tv.name}\r\n                                            //     < OpenDays >\r\n                                            //         {tv.first_air_date}\r\n                                            //     </OpenDays>\r\n                                            // </Item>\r\n                                            <Poster key={tv.id} id={tv.id} imageUrl={tv.poster_path} title={tv.name} rating={tv.vote_average} year={tv.first_air_date} isMovie={false} isMovie={false} isAdult={tv.adult === true ? true : false} />\r\n                                        )\r\n                                        )}\r\n                                    </Section>\r\n                                )\r\n                            }\r\n                            {\r\n                                today && today.length > 0 && (\r\n                                    <Section title=\"오늘 방영 tv\">\r\n                                        {today.map(tv => {\r\n                                            return (\r\n                                                // <Item key={tv.id}>\r\n                                                //     <Links key={tv.id} to={`tv/${tv.id}`}>\r\n                                                //         {tv.name.length > 10 ? tv.name.substring(0, 10) + \"...\" : tv.name}\r\n                                                //     </Links>\r\n                                                //     < OpenDays >\r\n                                                //         {tv.first_air_date}\r\n                                                //     </OpenDays>\r\n                                                // </Item>\r\n                                                <Poster key={tv.id} id={tv.id} imageUrl={tv.poster_path} title={tv.name} rating={tv.vote_average} year={tv.first_air_date} isMovie={false} isMovie={false} isAdult={tv.adult === true ? true : false} />\r\n                                            )\r\n                                        })}\r\n                                    </Section>\r\n                                )\r\n                            }\r\n                            {error && <Error text={error} />}\r\n                        </Container >\r\n                    )\r\n            }\r\n        </>\r\n\r\n    )\r\n\r\n\r\nHomePresenter.propTypes = {\r\n    nowPlaying: PropTypes.array,\r\n    getPopular: PropTypes.array,\r\n    upComing: PropTypes.array,\r\n    topRated: PropTypes.array,\r\n    weeklyAir: PropTypes.array,\r\n    error: PropTypes.string,\r\n    loading: PropTypes.bool.isRequired,\r\n    test: PropTypes.object,\r\n    // coins: PropTypes.object,\r\n}\r\nexport default HomePresenter","import axios from \"axios\";\r\nimport dotenv from \"dotenv\";\r\n\r\ndotenv.config();\r\n\r\nexport const api = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n    params: {\r\n        // api_key: process.env.API_KEY,\r\n        api_key: \"349254ebae30eb6fc6ef0a307c64feca\",\r\n        language: \"ko\"\r\n    }\r\n});\r\n\r\n\r\nexport const tvApi = {\r\n    getPopular: () => api.get(\"tv/popular\"),\r\n    today: () => api.get(\"tv/airing_today\"),\r\n    weeklyAir: () => api.get(\"tv/on_the_air\"),\r\n    // upComing: () => api.get(\"tv/upcoming\"),\r\n    topRated: () => api.get(\"tv/top_rated\"),\r\n    getLatest: () => api.get(\"tv/latest\"),\r\n    tvImages: (id) => api.get(`tv/${id}/images`),\r\n    getDetail: (id) => api.get(`tv/${id}`, {\r\n        params: {\r\n            append_to_response: \"videos\"\r\n        }\r\n    }),\r\n    postRate: (id) => api.get(`tv/${id}/rating`, {\r\n        params: {\r\n            guest_session_id: id,\r\n            session_id: id\r\n        }\r\n    }),\r\n    search: (term) => api.get(\"search/tv\", {\r\n        params: {\r\n            query: term\r\n        }\r\n    })\r\n};\r\n\r\nexport const movieApi = {\r\n    nowPlaying: () => api.get(\"movie/now_playing\"),\r\n    getPopular: () => api.get(\"movie/popular\"),\r\n    upComing: () => api.get(\"movie/upcoming\"),\r\n    topRated: () => api.get(\"movie/top_rated\"),\r\n    getLatest: () => api.get(\"movie/latest\"),\r\n    movieImages: (id) => api.get(`tv/${id}/images`),\r\n    getDetail: (id) => api.get(`movie/${id}`, {\r\n        params: {\r\n            append_to_response: \"videos\"\r\n        }\r\n    }),\r\n    postRate: (id) => api.get(`movie/${id}/rating`, {\r\n        params: {\r\n            guest_session_id: id,\r\n            session_id: id\r\n        }\r\n    }),\r\n    search: (term) => api.get(\"search/movie\", {\r\n        params: {\r\n            // query: encodeURIComponent(term)\r\n            query: term\r\n        }\r\n    })\r\n};\r\n","import HomeContainer from \"./HomeContainer\";\r\n\r\n\r\nexport default HomeContainer;","import React from \"react\";\r\nimport HomePresenter from \"./HomePresenter\"\r\nimport { movieApi, tvApi, api } from \"api\";\r\n\r\nexport default class extends React.Component {\r\n    state = {\r\n        getPopular: null,\r\n        tvgetPopular: null,\r\n        upComing: null,\r\n        topRated: null,\r\n        tvtopRated: null,\r\n        getLatest: null,\r\n        today: null,\r\n        error: null,\r\n        loading: true,\r\n        test: null\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            const { data: { results: getPopular } } = await movieApi.getPopular();\r\n            const { data: { results: tvgetPopular } } = await tvApi.getPopular();\r\n            const { data: { results: upComing } } = await movieApi.upComing();\r\n            const { data: { results: topRated } } = await movieApi.topRated();\r\n            const { data: { results: tvtopRated } } = await tvApi.topRated();\r\n            const { data: { results: getLatest } } = await tvApi.getLatest();\r\n            const { data: { results: today } } = await tvApi.today();\r\n\r\n            // let test;\r\n            const test = await api.get(\"movie/now_playing\");\r\n            // console.log(test);\r\n            // console.log(test.data.results[0]);\r\n\r\n            this.setState({\r\n                getPopular,\r\n                tvgetPopular,\r\n                upComing,\r\n                topRated,\r\n                tvtopRated,\r\n                getLatest,\r\n                today,\r\n                test\r\n            })\r\n\r\n        } catch{\r\n            this.setState({\r\n                error: \"Can Not Found.\"\r\n            })\r\n        } finally {\r\n            this.setState({\r\n                loading: false\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // const {\r\n        //     getPopular,\r\n        //     upComing,\r\n        //     topRated,\r\n        //     tvtopRated,\r\n        //     getLatest,\r\n        //     today,\r\n        //     error,\r\n        //     loading,\r\n        //     test\r\n        // } = this.state;\r\n        return (\r\n            <>\r\n                <HomePresenter {...this.state} />\r\n            </>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Section from \"Components/Section\";\r\nimport Loading from \"Components/Loading\";\r\n// import { Link } from 'react-router-dom';\r\nimport Error from \"Components/Error\";\r\nimport Poster from \"Components/Poster\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\n\r\nconst Container = styled.div`\r\n  padding: 0px 10px;\r\n`;\r\n\r\n\r\n// const Item = styled.div`\r\n//      width:100%;\r\n//     display:flex;\r\n//     flex-direction:column;\r\n//     align-items:center;\r\n//     justify-content:space-between;\r\n//     /* flex-direction:column; */\r\n//     margin:0.7rem 0;\r\n// `;\r\n\r\n// const Name = styled.div`\r\n//     margin:0.3rem 0.5rem;\r\n\r\n// `;\r\n\r\n// const Links = styled(Link)`\r\n//     color:#6D214F;\r\n//     &:hover{\r\n//         color:#F97F51;\r\n//         transition:color 0.5s linear;\r\n//     }\r\n//     font-size:1.5rem;\r\n// `;\r\n\r\n// const OpenDays = styled.span`\r\n//     display:flex;\r\n//     font-size:1rem;\r\n//     margin-top:1rem;\r\n// `;\r\n\r\nconst TVPresenter = ({ getPopular, today, weeklyAir, topRated, getLatest, error, loading }) => (\r\n    <>\r\n        <Helmet>\r\n            <title>TV Show</title>\r\n        </Helmet>\r\n        {\r\n            loading ? <Loading />\r\n                : (\r\n                    <Container>\r\n                        <Section title=\"tv 인기 순위\">\r\n                            {getPopular.map(tv =>\r\n                                // <Item key={tv.id}>\r\n                                //     <Name>\r\n                                //         <Links to={`tv/${tv.id}`}>\r\n                                //             {tv.name.length > 15 ? tv.name.substring(0, 15) + \"...\" : tv.name}\r\n                                //         </Links>\r\n                                //     </Name>\r\n                                //     <OpenDays>\r\n                                //         {tv.first_air_date}\r\n                                //     </OpenDays>\r\n                                // </Item>\r\n                                <Poster key={tv.id} id={tv.id} imageUrl={tv.poster_path} title={tv.name} rating={tv.vote_average} year={tv.first_air_date} isMovie={false} isMovie={false} isAdult={tv.adult === true ? true : false} />\r\n                            )}\r\n                        </Section>\r\n                        <Section title=\"tv 오늘 방영\">\r\n                            {today.map(tv =>\r\n                                // <Item key={tv.id}>\r\n                                //     <Name>\r\n                                //         <Links to={`tv/${tv.id}`}>\r\n                                //             {tv.name.length > 15 ? tv.name.substring(0, 15) + \"...\" : tv.name}\r\n                                //         </Links>\r\n                                //     </Name>\r\n                                //     <OpenDays>\r\n                                //         {tv.first_air_date}\r\n                                //     </OpenDays>\r\n                                // </Item>\r\n                                <Poster key={tv.id} id={tv.id} imageUrl={tv.poster_path} title={tv.name} rating={tv.vote_average} year={tv.first_air_date} isMovie={false} isMovie={false} isAdult={tv.adult === true ? true : false} />\r\n                            )}\r\n                        </Section>\r\n                        <Section title=\"tv 금주 방영 목록\">\r\n                            {weeklyAir.map(tv =>\r\n                                // <Item key={tv.id}>\r\n                                //     <Name>\r\n                                //         <Links to={`tv/${tv.id}`}>\r\n                                //             {tv.name.length > 15 ? tv.name.substring(0, 15) + \"...\" : tv.name}\r\n                                //         </Links>\r\n                                //     </Name>\r\n                                //     <OpenDays>\r\n                                //         {tv.first_air_date}\r\n                                //     </OpenDays>\r\n                                // </Item>\r\n                                <Poster key={tv.id} id={tv.id} imageUrl={tv.poster_path} title={tv.name} rating={tv.vote_average} year={tv.first_air_date} isMovie={false} isMovie={false} isAdult={tv.adult === true ? true : false} />\r\n                            )}\r\n                        </Section>\r\n                        <Section title=\"tv 평점 높은 순서\">\r\n                            {topRated.map(tv =>\r\n                                // <Item key={tv.id}>\r\n                                //     <Name>\r\n                                //         <Links to={`tv/${tv.id}`}>\r\n                                //             {tv.name.length > 15 ? tv.name.substring(0, 15) + \"...\" : tv.name}\r\n                                //         </Links>\r\n                                //     </Name>\r\n                                //     <OpenDays>\r\n                                //         {tv.first_air_date}\r\n                                //     </OpenDays>\r\n                                // </Item>\r\n                                <Poster key={tv.id} id={tv.id} imageUrl={tv.poster_path} title={tv.name} rating={tv.vote_average} year={tv.first_air_date} isMovie={false} isMovie={false} isAdult={tv.adult === true ? true : false} />\r\n                            )}\r\n                        </Section>\r\n                        <Section title=\"tv 제작 예정 작품\">\r\n                            {getLatest.length > 1 ? getLatest.map(tv =>\r\n                                // <Item key={tv.id}>\r\n                                //     <Name>\r\n                                //         <Links to={`tv/${tv.id}`}>\r\n                                //             {tv.name.length > 15 ? tv.name.substring(0, 15) + \"...\" : tv.name}\r\n                                //         </Links>\r\n                                //     </Name>\r\n                                //     <OpenDays>\r\n                                //         {tv.first_air_date}\r\n                                //     </OpenDays>\r\n                                // </Item>\r\n                                <Poster key={tv.id} id={tv.id} imageUrl={tv.poster_path} title={tv.name} rating={tv.vote_average} year={tv.first_air_date ? tv.first_air_date : \"미정\"} isMovie={false} isMovie={false} isAdult={tv.adult === true ? true : false} />\r\n                            ) : (\r\n                                    // <Item key={getLatest.id}>\r\n                                    //     <Name>\r\n                                    //         <Links to={`tv/${getLatest.id}`}>\r\n                                    //             {getLatest.name.length > 15 ? getLatest.name.substring(0, 15) + \"...\" : getLatest.name}\r\n                                    //         </Links>\r\n                                    //     </Name>\r\n                                    //     <OpenDays>\r\n                                    //         {getLatest.first_air_date}\r\n                                    //     </OpenDays>\r\n                                    // </Item>\r\n                                    <Poster key={getLatest.id} id={getLatest.id} imageUrl={getLatest.poster_path} title={getLatest.name} rating={getLatest.vote_average} year={getLatest.first_air_date ? getLatest.first_air_date : \"미정\"} isMovie={false} isAdult={getLatest.adult === true ? true : false} />\r\n                                )}\r\n                        </Section>\r\n                        {error && <Error text={error} />}\r\n                    </Container>\r\n                )\r\n\r\n        }\r\n\r\n    </>\r\n)\r\nTVPresenter.propTypes = {\r\n    getPopular: PropTypes.array,\r\n    today: PropTypes.array,\r\n    weeklyAir: PropTypes.array,\r\n    topRated: PropTypes.array,\r\n    getLatest: PropTypes.object,\r\n    error: PropTypes.string,\r\n    loading: PropTypes.bool.isRequired\r\n}\r\nexport default TVPresenter;","import TVContainer from \"./TVContainer\";\r\n\r\n\r\nexport default TVContainer;","import React from \"react\";\r\nimport TVPresenter from \"./TVPresenter\"\r\nimport { tvApi } from \"api\";\r\n\r\nexport default class extends React.Component {\r\n    state = {\r\n        getPopular: null,\r\n        today: null,\r\n        weeklyAir: null,\r\n        topRated: null,\r\n        getLatest: null,\r\n        error: null,\r\n        loading: true\r\n    }\r\n    async componentDidMount() {\r\n        try {\r\n            const { data: { results: getPopular } } = await tvApi.getPopular();\r\n            const { data: { results: today } } = await tvApi.today();\r\n            const { data: { results: weeklyAir } } = await tvApi.weeklyAir();\r\n            const { data: { results: topRated } } = await tvApi.topRated();\r\n            const { data: getLatest } = await tvApi.getLatest();\r\n            // console.log(getLatest);\r\n\r\n            this.setState({\r\n                getPopular,\r\n                today,\r\n                weeklyAir,\r\n                topRated,\r\n                getLatest\r\n            })\r\n        } catch{\r\n            this.setState({\r\n                error: \"Can Not Found.\"\r\n            })\r\n        } finally {\r\n            this.setState({\r\n                loading: false\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            getPopular,\r\n            today,\r\n            weeklyAir,\r\n            topRated,\r\n            getLatest,\r\n            error,\r\n            loading,\r\n        } = this.state;\r\n\r\n        return (\r\n            <TVPresenter getPopular={getPopular} today={today} weeklyAir={weeklyAir} topRated={topRated} getLatest={getLatest} error={error} loading={loading} />\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Loading from \"Components/Loading\";\r\nimport Section from \"Components/Section\";\r\n// import { Link } from \"react-router-dom\";\r\nimport Error from \"Components/Error\";\r\nimport Poster from \"Components/Poster\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\n\r\nconst Container = styled.div`\r\n  padding: 0px 10px;\r\n`;\r\n\r\n// const Item = styled.div`\r\n//     width:100%;\r\n//     display:flex;\r\n//     flex-direction:column;\r\n//     align-items:center;\r\n//     justify-content:space-between;\r\n//     /* flex-direction:column; */\r\n//     margin:0.7rem 0;\r\n// `;\r\n// const Title = styled.div`\r\n\r\n// `;\r\n\r\n// const Links = styled(Link)`\r\n//     margin:0 0.8rem 0 0;\r\n//     color:#6D214F;\r\n//     overflow: hidden;\r\n//     text-overflow:ellipsis;\r\n//     display:inline-block;\r\n//     font-size:1.5rem;\r\n\r\n//     &:hover{\r\n//         color:#ff4757;\r\n//         transition:color 0.5s ease-in-out;\r\n//     }\r\n// `;\r\n\r\n// const OpenDays = styled.span`\r\n//     display:flex;\r\n//     font-size:1rem;\r\n//     margin-top:1rem;\r\n// `;\r\n\r\nconst MoviePresernter = ({ nowPlaying, getPopular, upComing, topRated, getLatest, error, loading }) => (\r\n    <>\r\n        <Helmet>\r\n            <title>Movies</title>\r\n        </Helmet>\r\n        {\r\n            loading ? <Loading />\r\n                : (\r\n                    <Container>\r\n                        <Section title=\"현재 상영중인 영화\">\r\n                            {nowPlaying.map(movie =>\r\n                                // <Item key={movie.id}>\r\n                                //     <Title>\r\n                                //         <Links to={`movie/${movie.id}`}>\r\n                                //             {movie.title.length > 15 ? movie.title.substring(0, 15) + \"...\" : movie.title}\r\n                                //         </Links>\r\n                                //     </Title>\r\n                                //     <OpenDays>\r\n                                //         {movie.release_date}\r\n                                //     </OpenDays>\r\n                                // </Item>\r\n                                <Poster key={movie.id} id={movie.id} imageUrl={movie.poster_path} title={movie.title} rating={movie.vote_average} year={movie.release_date} isMovie={true} isAdult={movie.adult === true ? true : false} />\r\n                            )}\r\n                        </Section>\r\n                        <Section title=\"인기있는 영화\">\r\n                            {getPopular.map(movie =>\r\n                                // <Item key={movie.id}>\r\n                                //     <Title>\r\n                                //         <Links to={`movie/${movie.id}`}>\r\n                                //             {movie.title.length > 15 ? movie.title.substring(0, 15) + \"...\" : movie.title}\r\n                                //         </Links>\r\n                                //     </Title>\r\n                                //     <OpenDays>\r\n                                //         {movie.release_date}\r\n                                //     </OpenDays>\r\n                                // </Item>\r\n                                <Poster key={movie.id} id={movie.id} imageUrl={movie.poster_path} title={movie.title} rating={movie.vote_average} year={movie.release_date} isMovie={true} isAdult={movie.adult === true ? true : false} />\r\n                            )}\r\n                        </Section>\r\n                        <Section title=\"개봉 예정 영화\">\r\n                            {upComing.map(movie =>\r\n                                // <Item key={movie.id}>\r\n                                //     <Title>\r\n                                //         <Links to={`movie/${movie.id}`}>\r\n                                //             {movie.title.length > 15 ? movie.title.substring(0, 15) + \"...\" : movie.title}\r\n                                //         </Links>\r\n                                //     </Title>\r\n                                //     <OpenDays>\r\n                                //         {movie.release_date}\r\n                                //     </OpenDays>\r\n                                // </Item>\r\n                                <Poster key={movie.id} id={movie.id} imageUrl={movie.poster_path} title={movie.title} rating={movie.vote_average} year={movie.release_date} isMovie={true} isAdult={movie.adult === true ? true : false} />\r\n                            )}\r\n                        </Section>\r\n                        <Section title=\"높은 평점\">\r\n                            {topRated.map(movie =>\r\n                                // <Item key={movie.id}>\r\n                                //     <Title>\r\n                                //         <Links to={`movie/${movie.id}`}>\r\n                                //             {movie.title.length > 15 ? movie.title.substring(0, 15) + \"...\" : movie.title}\r\n                                //         </Links>\r\n                                //     </Title>\r\n                                //     <OpenDays>\r\n                                //         {movie.release_date}\r\n                                //     </OpenDays>\r\n                                // </Item>\r\n                                <Poster key={movie.id} id={movie.id} imageUrl={movie.poster_path} title={movie.title} rating={movie.vote_average} year={movie.release_date} isMovie={true} isAdult={movie.adult === true ? true : false} />\r\n                            )}\r\n                        </Section>\r\n                        <Section title=\"개봉 예정 영화\">\r\n                            {getLatest.length > 1 ? getLatest.map(movie =>\r\n                                // <Item key={movie.id}>\r\n                                //     <Title>\r\n                                //         <Links to={`movie/${movie.id}`}>\r\n                                //             {movie.title.length > 15 ? movie.title.substring(0, 15) + \"...\" : movie.title}\r\n                                //         </Links>\r\n                                //     </Title>\r\n                                //     <OpenDays>\r\n                                //         {movie.release_date}\r\n                                //     </OpenDays>\r\n                                // </Item>\r\n                                <Poster key={movie.id} id={movie.id} imageUrl={movie.poster_path} title={movie.title} rating={movie.vote_average} year={movie.release_date ? movie.release_date : \"미정\"} isMovie={true} isAdult={movie.adult === true ? true : false} />\r\n                            ) : (\r\n                                    // <Item key={getLatest.id}>\r\n                                    //     <Title>\r\n                                    //         <Links to={`movie/${getLatest.id}`}>\r\n                                    //             {getLatest.title.length > 15 ? getLatest.title.substring(0, 15) + \"...\" : getLatest.title}\r\n                                    //         </Links>\r\n                                    //     </Title>\r\n                                    //     <OpenDays>\r\n                                    //         {getLatest.release_date ? getLatest.release_date : \"미정\"}\r\n                                    //     </OpenDays>\r\n                                    // </Item>\r\n                                    <Poster key={getLatest.id} id={getLatest.id} imageUrl={getLatest.poster_path} title={getLatest.title} rating={getLatest.vote_average} year={getLatest.release_date ? getLatest.release_date : \"미정\"} isMovie={true} isAdult={getLatest.adult === true ? true : false} />\r\n                                )}\r\n                        </Section>\r\n                        {error && <Error text={error} />}\r\n\r\n                    </Container>\r\n                )\r\n\r\n        }\r\n    </>\r\n\r\n)\r\nMoviePresernter.propTypes = {\r\n    nowPlaying: PropTypes.array,\r\n    getPopular: PropTypes.array,\r\n    upComing: PropTypes.array,\r\n    topRated: PropTypes.array,\r\n    getLatest: PropTypes.object,\r\n    error: PropTypes.string,\r\n    loading: PropTypes.bool.isRequired\r\n}\r\nexport default MoviePresernter;","import MovieContainer from \"./MovieContainer\";\r\n\r\n\r\nexport default MovieContainer;","import React from \"react\";\r\nimport MoviePresenter from \"./MoviePresenter\"\r\nimport { movieApi } from \"api\";\r\n\r\nexport default class extends React.Component {\r\n    state = {\r\n        nowPlaying: null,\r\n        getPopular: null,\r\n        upComing: null,\r\n        topRated: null,\r\n        getLatest: null,\r\n        error: null,\r\n        loading: true\r\n    }\r\n    async componentDidMount() {\r\n        try {\r\n            const { data: { results: nowPlaying } } = await movieApi.nowPlaying();\r\n            const { data: { results: getPopular } } = await movieApi.getPopular();\r\n            const { data: { results: upComing } } = await movieApi.upComing();\r\n            const { data: { results: topRated } } = await movieApi.topRated();\r\n            const { data: getLatest } = await movieApi.getLatest();\r\n\r\n\r\n            this.setState({\r\n                nowPlaying,\r\n                getPopular,\r\n                upComing,\r\n                topRated,\r\n                getLatest\r\n            })\r\n        } catch{\r\n            this.setState({\r\n                error: \"Can Not Found.\"\r\n            })\r\n        } finally {\r\n            this.setState({\r\n                loading: false\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n\r\n\r\n        return (\r\n            <MoviePresenter {...this.state} />\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Loading from \"Components/Loading\";\r\nimport Section from \"Components/Section\";\r\n// import { Link } from \"react-router-dom\";\r\nimport Error from \"Components/Error\";\r\nimport Poster from \"Components/Poster\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\n\r\n\r\nconst Container = styled.div`\r\n  padding: 0px 20px;\r\n\r\n`;\r\n\r\nconst Form = styled.form`\r\n    margin-bottom:50px;\r\n `;\r\n\r\nconst Input = styled.input`\r\n    all:unset;\r\n    font-size:1.5rem;\r\n    color:#1B9CFC;\r\n    width:100%;\r\n    height:2rem;\r\n    border-bottom:1px solid #6D214F;\r\n    box-shadow: 0px 2.5px 5px 0px rgba(0,0,0,0.75);\r\n `;\r\n\r\n// const Links = styled(Link)`\r\n//     margin:0 0.8rem 0 0;\r\n//     color:#6D214F;\r\n//     display:flex;\r\n//     justify-content:center;\r\n//     align-items:center;\r\n//     font-size:1.5rem;\r\n\r\n//     &:hover{\r\n//         color:#ff4757;\r\n//         transition:color 0.5s ease-in-out;\r\n//     }\r\n// `;\r\n\r\nconst SearchPresenter = ({ MovieResults, tvResults, searchTerm, error, loading, handleSubmit, updateTerm }) => (\r\n\r\n    <Container>\r\n        <Helmet>\r\n            <title>Search</title>\r\n        </Helmet>\r\n        <Form onSubmit={handleSubmit}>\r\n            <Input\r\n                placeholder=\"Search by Moive and TV Show  is name...\" value={searchTerm} onChange={updateTerm}\r\n            />\r\n        </Form>\r\n        {loading ? <Loading /> :\r\n            <>\r\n                {MovieResults && MovieResults.length > 0 && <Section title=\"영화\">\r\n                    {MovieResults.map(movie =>\r\n                        // <Links to={`movie/${movie.id}`} key={movie.id}>\r\n                        //     {movie.title}\r\n                        // </Links>\r\n                        <Poster key={movie.id} id={movie.id} imageUrl={movie.poster_path ? movie.poster_path : movie.backdrop_path} title={movie.title} rating={movie.vote_average} year={movie.release_date ? movie.release_date : \"미정\"} isMovie={true} isAdult={movie.adult === true ? true : false} />\r\n                    )}\r\n                </Section>}\r\n                {tvResults && tvResults.length > 0 && <Section title=\"TV 프로그램\">\r\n                    {tvResults.map(tv =>\r\n                        // <Links to={`tv/${tv.id}`} key={tv.id}>\r\n                        //     {tv.name}\r\n                        // </Links>\r\n                        <Poster key={tv.id} id={tv.id} imageUrl={tv.poster_path ? tv.poster_path : tv.backdrop_path} title={tv.name} rating={tv.vote_average} year={tv.first_air_date ? tv.first_air_date : \"미정\"} isMovie={false} isAdult={tv.adult === true ? true : false} />\r\n                    )}\r\n                </Section>}\r\n            </>\r\n        }\r\n        {error && <Error text={error} />}\r\n    </Container>\r\n)\r\n\r\nSearchPresenter.propTypes = {\r\n    MovieResults: PropTypes.array,\r\n    tvResults: PropTypes.array,\r\n    searchTerm: PropTypes.string,\r\n    error: PropTypes.string,\r\n    loading: PropTypes.bool.isRequired,\r\n    handleSubmit: PropTypes.func.isRequired,\r\n    updateTerm: PropTypes.func.isRequired\r\n}\r\nexport default SearchPresenter;","import SearchContainer from \"./SearchContainer\";\r\n\r\n\r\nexport default SearchContainer;","import React from \"react\";\r\nimport SearchPresenter from \"./SearchPresenter\"\r\nimport { movieApi, tvApi } from \"../../api\";\r\n\r\nexport default class extends React.Component {\r\n    state = {\r\n        MovieResults: null,\r\n        tvResults: null,\r\n        searchTerm: \"\",\r\n        error: null,\r\n        loading: false\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const { searchTerm } = this.state;\r\n        if (searchTerm !== \"\") {\r\n            this.searchByTerm();\r\n        }\r\n    }\r\n\r\n    updateTerm = event => {\r\n        const {\r\n            target: { value }\r\n        } = event;\r\n\r\n        this.setState({\r\n            searchTerm: value\r\n        });\r\n    };\r\n\r\n    searchByTerm = async () => {\r\n        const { searchTerm } = this.state;\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        try {\r\n            const { data: { results: MovieResults } } = await movieApi.search(searchTerm);\r\n            const { data: { results: tvResults } } = await tvApi.search(searchTerm);\r\n            this.setState({\r\n                MovieResults,\r\n                tvResults,\r\n            })\r\n\r\n        } catch{\r\n            this.setState({\r\n                error: \"Can Not Found.\"\r\n            })\r\n        } finally {\r\n            this.setState({\r\n                loading: false\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            MovieResults,\r\n            tvResults,\r\n            searchTerm,\r\n            error,\r\n            loading,\r\n        } = this.state;\r\n        return (\r\n            <SearchPresenter MovieResults={MovieResults} tvResults={tvResults} searchTerm={searchTerm} error={error} loading={loading} handleSubmit={this.handleSubmit} updateTerm={this.updateTerm} />\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Loading from \"Components/Loading\";\r\nimport { Link } from 'react-router-dom';\r\nimport Error from \"Components/Error\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\n\r\n\r\nconst Container = styled.div`\r\n    position:relative;\r\n    padding: 0px 10px;\r\n    margin-top:1rem;\r\n    display:flex;\r\n    /* flex-direction:column; */\r\n    @media screen and (max-width: 420px) {\r\n        display:block;        \r\n    }\r\n`;\r\n\r\n\r\nconst Title = styled.span`\r\n    font-size:3rem;\r\n    font-weight:700;\r\n    margin: 0.8rem 0;\r\n    line-height:1.5;\r\n`;\r\n\r\nconst OpneDays = styled.span`\r\n    font-size:1.8rem;\r\n    margin-top:0.7rem;\r\n`;\r\n\r\nconst Genres = styled.span`\r\n    font-size:1.8rem;\r\n    margin-top:0.7rem;\r\n\r\n`;\r\nconst RunTime = styled.div`\r\n    font-size:1.6rem;\r\n    margin: 0.7rem 0 0 0;\r\n`;\r\n\r\nconst Description = styled.p`\r\n    text-align:center;\r\n    font-size:1rem;\r\n    font-weight:400;\r\n    border:1px solid red;\r\n    margin-top:0.7rem;\r\n    line-height:1.7;\r\n    background:#487eb0;\r\n    color:black;\r\n    flex:1;\r\n    border-radius:10px;\r\n    padding:5px;\r\n    box-shadow: 0px 5px 7px 0px #3B3B98;\r\n`;\r\n\r\nconst Average = styled.div`\r\n    font-size:1.8rem;\r\n    margin-top:0.7rem;\r\n`;\r\n\r\nconst Links = styled(Link)`\r\n    position:absolute;\r\n    top:0;\r\n    right:0;\r\n    color:white;\r\n    margin-bottom:1rem;\r\n    display:flex;\r\n    justify-content:flex-start;\r\n    font-size:1.5rem;\r\n    width:50px;\r\n    &:hover{\r\n        color:#ff4757;\r\n        transition:color 0.5s ease-in-out;\r\n    }\r\n`;\r\n\r\nconst Image = styled.div`\r\n    background-image:url(${props => `${props.bgUrl}`});\r\n    width:100%;\r\n    height:800px;\r\n    background-size:100% 100%;\r\n    background-position:cover cover;\r\n    background-repeat:no-repeat;\r\n    display:flex;\r\n    flex:0.7;\r\n    z-index:2;\r\n    &:hover{\r\n\r\n\r\n    }\r\n`;\r\n\r\nconst Asite = styled.a`\r\n    font-size:1.3rem;\r\n    color:#FEA47F;\r\n    border-bottom:1px solid #F8EFBA;\r\n    &:hover{\r\n        color: #F97F51;\r\n        border-bottom:1px solid #FC427B;\r\n    }\r\n`;\r\n\r\nconst Backdrop = styled.div`\r\n    position:absolute;\r\n    top:-20px;\r\n    left:0;\r\n    width:100%;\r\n    height: calc(100vh - 55px);\r\n    background-image:url(${props => `${props.bgUrl}`});\r\n    background-position:center center;\r\n    background-size:100% 100%;\r\n    z-index:-1;\r\n    filter:blur(6px);\r\n    opacity:0.7;\r\n\r\n`;\r\nconst InfoBox = styled.div`\r\n    width:100%;\r\n    display:flex;\r\n    flex:1;\r\n    flex-direction:column;\r\n    padding:10px;\r\n`;\r\nconst Episode = styled.div`\r\n\r\n`;\r\nconst Seasons = styled.div`\r\n    width:100%;\r\n    display:flex;\r\n    flex-direction:column;\r\n    &>div{\r\n        width:140px;\r\n        color:red;\r\n        margin:5px;\r\n        cursor: pointer;\r\n    }\r\n    &>div>span{\r\n        width:500px;\r\n        color:white;\r\n        margin-top:3px;\r\n        line-height:1.5;\r\n        display:none;\r\n        cursor:cell;\r\n\r\n    }\r\n    &>div:hover{\r\n        width:100%;\r\n        &>span{\r\n            display:block;\r\n        }\r\n    }\r\n`;\r\n\r\nconst handleClick = () => {\r\n    alert(\"찾을 수 없습니다.\")\r\n    return 0\r\n}\r\n\r\n\r\nlet i = 1;\r\nconst DetailPresenter = ({ reasults, error, loading, result }) => (\r\n    <>\r\n        {\r\n            loading ?\r\n                <>\r\n                    <Helmet>\r\n                        <title>Loaging</title>\r\n                        {/* <link rel=\"shortcut icon\" href={`https://image.tmdb.org/t/p/original${result.networks[0].logo_path}`} /> */}\r\n                    </Helmet>\r\n                    <Loading />\r\n                </>\r\n                : error ? <Error /> : (\r\n                    <Container>\r\n                        {/* {console.log(result)} */}\r\n                        <Helmet>\r\n                            <title>Loaging</title>\r\n                            <link rel=\"shortcut icon\" href={result.networks && result.networks.length >= 1 ? `https://image.tmdb.org/t/p/original${result.networks[0].logo_path}` : `https://image.tmdb.org/t/p/original${result.poster_path}`} />\r\n                        </Helmet>\r\n                        <Helmet>\r\n                            <title>{result.title ? result.title : result.name}</title>\r\n                        </Helmet>\r\n                        <div style={{ display: \"none\" }}>{i = 1}</div>\r\n                        <Links to={window.location.href.indexOf(\"movie\") !== -1 ?\r\n                            `/movie` : window.location.href.indexOf(\"tv\") !== -1 ? `/tv` : `/`\r\n                        }>\r\n                            <i className=\"fas fa-arrow-left fa-2x\"></i>\r\n                        </Links>\r\n                        {/* adult {console.log(result.videos)} */}\r\n                        {/* <img src={`${result.production_companies[0].logo_path}`} alt=\"Image\" /> */}\r\n                        <Image bgUrl={result.adult ? require(\"assets/time.jpg\") : result.poster_path ? `https://image.tmdb.org/t/p/original${result.poster_path}` : (result.last_episode_to_air ? `https://image.tmdb.org/t/p/original${result.last_episode_to_air.still_path}` : require(\"assets/time.jpg\"))} />\r\n                        {/* require(\"assets/time.jpg\") */}\r\n                        <InfoBox>\r\n                            <Title>\r\n                                {document.location.href.split(\"#/\")[1].split(\"/\")[0] === \"movie\" ? result.title : result.name}\r\n                                <span style={{ fontSize: \"1rem\" }}>\r\n                                    ({document.location.href.split(\"#/\")[1].split(\"/\")[0] === \"movie\" ? result.original_title : result.original_name})\r\n                            </span>\r\n                            </Title>\r\n                            <div style={{ margin: \"1rem\" }}>\r\n                                <Asite href={`https://www.youtube.com/watch?v=${result.videos.results.length > 0 ? result.videos.results[0].key : \"\"}`} onClick={result.videos.results.length > 0 ? null : handleClick} target=\"_blank\">\r\n                                    영상 바로가기(youtube)\r\n                            </Asite>\r\n                            </div>\r\n                            <div style={{ margin: \"1rem\" }}>\r\n                                <Asite href={`${result.homepage}`} onClick={result.homepage && result.homepage.length > 0 ? null : handleClick} target=\"_blank\">\r\n                                    공식 홈페이지\r\n                                </Asite>\r\n                            </div>\r\n                            <OpneDays>\r\n                                최근 방영: {result.release_date ? result.release_date : result.last_air_date}\r\n\r\n                            </OpneDays>\r\n                            <Episode>\r\n                                {result.episode_run_time ? (result.episode_run_time.length > 1 ? result.episode_run_time.map(x => (\r\n                                    <RunTime key={x}>\r\n                                        에피소드{i++}:\r\n                                        {x === 0 ? \"\" : `${x}분`}\r\n                                    </RunTime>\r\n                                )) : <RunTime key={result.id}>{result.episode_run_time > 0 ? `${result.episode_run_time}분` : \"\"}</RunTime>) : <RunTime key={result.id}>{result.runtime > 0 ? `${result.runtime}분` : \"\"}</RunTime>}\r\n                            </Episode>\r\n                            <Seasons>\r\n                                {result.seasons ? (result.seasons.length >= 1 ? result.seasons.map(x => (\r\n                                    <div key={x.id}>\r\n                                        {`${x.name}: ${x.air_date}`}\r\n                                        <span>{`${x.overview}`}</span>\r\n                                    </div>\r\n                                )) : <div key={result.id}>\r\n                                        {`${result.seasons.name}: ${result.seasons.air_date}`}\r\n                                        <span>{`${result.overview}`}</span>\r\n                                    </div>) : null}\r\n                            </Seasons>\r\n                            <Genres>\r\n                                장르: {result.genres.map((x, index) => index === result.genres.length - 1 ?\r\n                                <span key={x.id}>\r\n                                    {x.name}\r\n                                </span> : <span key={x.id}>\r\n                                    {x.name},\r\n                                </span>)}\r\n                            </Genres>\r\n                            <Average>\r\n                                평점: {result.vote_average}\r\n                            </Average>\r\n                            <Description>\r\n                                {result.overview}\r\n                            </Description>\r\n                            {error && <Error text={error} />}\r\n                            <Backdrop bgUrl={result.adult ? require(\"assets/time.jpg\") : result.poster_path ? `https://image.tmdb.org/t/p/original${result.backdrop_path ? result.backdrop_path : result.poster_path}` : require(\"assets/time.jpg\")} />\r\n                        </InfoBox>\r\n                    </Container>\r\n                )\r\n\r\n        }\r\n    </>\r\n)\r\n\r\nDetailPresenter.propTypes = {\r\n    reasults: PropTypes.object,\r\n    error: PropTypes.string,\r\n    loading: PropTypes.bool.isRequired,\r\n    result: PropTypes.object,\r\n\r\n};\r\n\r\nexport default DetailPresenter;","import DetailContainer from \"./DetailContainer\";\r\n\r\n\r\nexport default DetailContainer;","import React from \"react\";\r\nimport DetailPresenter from \"./DetailPresenter\"\r\nimport { movieApi, tvApi } from \"../../api\";\r\n\r\nexport default class extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const { location: { pathname } } = props;\r\n        this.state = {\r\n            reasults: null,\r\n            error: null,\r\n            loading: true,\r\n            isMovie: pathname.includes(\"/movie/\")\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const {\r\n            match: {\r\n                params: { id }\r\n            },\r\n            history: { push },\r\n        } = this.props;\r\n\r\n        const { isMovie } = this.state;\r\n\r\n        const parseId = parseInt(id);\r\n\r\n        if (isNaN(parseId)) {\r\n            return push(\"/\")\r\n        }\r\n        let result = null;\r\n        try {\r\n            if (isMovie) {\r\n                ({ data: result } = await movieApi.getDetail(parseId));\r\n            }\r\n            else {\r\n                ({ data: result } = await tvApi.getDetail(parseId));\r\n            }\r\n        } catch{\r\n            this.setState({\r\n                error: \"Can Not Found.\"\r\n            })\r\n        } finally {\r\n            this.setState({\r\n                loading: false,\r\n                result\r\n            })\r\n        }\r\n\r\n    }\r\n    render() {\r\n        const {\r\n            reasults,\r\n            error,\r\n            loading,\r\n            result\r\n        } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <DetailPresenter reasults={reasults} error={error} loading={loading} result={result} />\r\n            </>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport styled from \"styled-components\";\r\n\r\nconst Header = styled.header`\r\n    width:100%;\r\n    height:50px;\r\n    z-index:100;\r\n    position:fixed;\r\n    top:0;\r\n    left:0;\r\n    display:flex;\r\n    text-align:center;\r\n    justify-content:space-around;\r\n    align-items:center;\r\n    background-color:#00a8ff;\r\n    box-shadow: 0px 3px 15px 3.5px #3c6382;\r\n\r\n`;\r\n\r\nconst List = styled.ul`\r\n    display:flex;\r\n    width:100%;\r\n    justify-content:space-around;\r\n    list-style:none;\r\n`;\r\n\r\nconst Item = styled.li`\r\n   width:80px;\r\n   height:50px;\r\n   text-align:center;\r\n   display:flex;\r\n   align-items:center;\r\n   justify-content:center;\r\n   border-bottom: 3px solid ${props => props.current ? \"#2f3542\" : \"none\"};\r\n   transition: border-bottom 0.3s ease-in-out;\r\n`;\r\n\r\nconst Slink = styled(Link)`\r\n    color:white;\r\n    font-size:1.3rem;\r\n`;\r\n\r\nexport default withRouter(({ location: { pathname } }) => (\r\n    <Header>\r\n        <List>\r\n            <Item current={pathname === \"/\"}>\r\n                <Slink to=\"/\">Home</Slink>\r\n            </Item>\r\n            <Item current={pathname === \"/tv\"}>\r\n                <Slink to=\"/tv\">TV</Slink>\r\n            </Item>\r\n            <Item current={pathname === \"/movie\"}>\r\n                <Slink to=\"/movie\">movie</Slink>\r\n            </Item>\r\n            <Item current={pathname === \"/search\"}>\r\n                <Slink to=\"/search\">Search</Slink>\r\n            </Item>\r\n        </List>\r\n    </Header>\r\n));","import Header from \"./Header\";\r\n\r\nexport default Header;","import React from \"react\";\r\nimport { HashRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\r\nimport Home from \"Routes/Home\";\r\nimport TV from \"Routes/TV\";\r\nimport Movie from \"Routes/Movie\";\r\nimport Search from \"Routes/Search\";\r\nimport Detail from \"Routes/Detail\";\r\nimport Header from 'Components/Header';\r\n\r\n\r\nexport default () => (\r\n    <Router>\r\n        <Header />\r\n        <Switch>\r\n            <Route path=\"/\" exact component={Home} />\r\n            <Route path=\"/tv\" exact component={TV} />\r\n            <Route path=\"/movie\" exact component={Movie} />\r\n            <Route path=\"/search\" component={Search} />\r\n            <Route path=\"/movie/:id\" component={Detail} />\r\n            <Route path=\"/tv/:id\" component={Detail} />\r\n            {/* <Route path=\"https://www.youtube.com/watch?v=\" /> */}\r\n            <Redirect from=\"*\" to=\"/\" />\r\n        </Switch>\r\n    </Router>\r\n)","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst GlobalStyled = createGlobalStyle`\r\n    ${reset};\r\n    a{\r\n        list-style:none;\r\n        text-decoration:none;\r\n    }\r\n    *{\r\n        margin:0;\r\n        padding:0;\r\n        box-sizing:border-box;\r\n    }\r\n    html{\r\n        font-size:16px;\r\n    }\r\n    body{\r\n        font-size:14px;\r\n        background-color:#130f40;\r\n        color:white;\r\n        padding-top:55px;\r\n        height:100%;\r\n        width:100%;\r\n        \r\n    }\r\n        \r\n    ::-webkit-scrollbar { \r\n        width: 10px; \r\n        z-index:-100;\r\n    }\r\n    ::-webkit-scrollbar-track { \r\n        background-color: #6D214F;\r\n        z-index:-100;\r\n        &:hover{\r\n            background-color: #1B9CFC;\r\n        }\r\n    }\r\n    \r\n    ::-webkit-scrollbar-thumb { \r\n        z-index:-100;\r\n\r\n        background: #FC427B;\r\n        border-radius:10px; }\r\n    ::-webkit-scrollbar-thumb:hover { background: #FD7272;  }\r\n    ::-webkit-scrollbar-thumb:active { background: #F97F51; }\r\n    ::-webkit-scrollbar-button { \r\n        display: none;                 \r\n        z-index:-100;\r\n    }\r\n\r\n    input:-webkit-autofill,\r\n    input:-webkit-autofill:hover, \r\n    input:-webkit-autofill:focus,\r\n    textarea:-webkit-autofill,\r\n    textarea:-webkit-autofill:hover,\r\n    textarea:-webkit-autofill:focus,\r\n    select:-webkit-autofill,\r\n    select:-webkit-autofill:hover,\r\n    select:-webkit-autofill:focus {\r\n    border: 1px solid green;\r\n    -webkit-text-fill-color: green;\r\n    transition: background-color 5000s ease-in-out 0s;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyled;","import React from 'react';\nimport Router from 'Components/Router';\nimport GlobalStyled from './GlobalStyles';\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyled />\n      <Router />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'Components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}